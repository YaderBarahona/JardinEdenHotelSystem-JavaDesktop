/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jardinedenhotel.view;

import com.jardinedenhotel.connection.conexionn;
import com.jardinedenhotel.controller.ManageUsers;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.WindowConstants;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Yader Jr
 */
public class ManageUsersForm extends javax.swing.JFrame {

    /**
     * Creates new form InformacionUsuario
     */
    String user = "", user_update = "";
    int ID;
    ManageUsers manage_user;

    public ManageUsersForm() throws SQLException {
        user = LoginForm.user;
        user_update = ShowUsersForm.user_update;

        manage_user = new ManageUsers();

        initComponents();
        setLocationRelativeTo(null);

        setSize(640, 450);
        setResizable(false);
        setTitle("Información del usuario " + user_update + " - sesión de " + user);
        this.setLocationRelativeTo(null);

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        ImageIcon wallpaper = new ImageIcon("src/img/hotel2.jpg");

        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(label_wallpaper.getWidth(), label_wallpaper.getHeight(),
                Image.SCALE_DEFAULT));

        label_wallpaper.setIcon(icono);
        this.repaint();

        setIconImage(new ImageIcon(getClass().getResource("/img/logo_hotel.png")).getImage());

        label_titulo.setText("Informacion del usuario " + user_update);

        conexionn con = new conexionn();
        try {
            Connection cn = con.getconnection();
            PreparedStatement pst = cn.prepareStatement("select * from usuarios where username = '" + user_update + "'");

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                //variable ID para recuperar el id del usuario de la db llamando al objeto rs por el metodo getInt (columna o campo que se va a recuperar en este caso "id_usuario" de la db)
                ID = rs.getInt("id_usuario");

                //a cada txt le ponemos el nombre y demas propiedades del registro que haya seleccionado de la tabla esto por el metodo setText y llamando al objeto rs con el metodo getString (campo o columna que se vaya a recuperar de la db)
                txt_nombre.setText(rs.getString("nombre"));
                txt_email.setText(rs.getString("email"));
                txt_telefono.setText(rs.getString("telefono"));
                txt_username.setText(rs.getString("username"));
                txt_registradopor.setText(rs.getString("registrado_por"));

                combobox_permisos.setSelectedItem(rs.getString("permisos"));
                combobox_estatus.setSelectedItem(rs.getString("estado"));
            }

            cn.close();

        } catch (SQLException e) {
            System.err.println("Error en cargar usuario" + e);
            JOptionPane.showMessageDialog(null, "Error al cargar, contacte al administrador");
        }
    }
//
//    @Override
//    public Image getIconImage() {
//        //no necesita especificar la carpeta src el metodo ya sabe que se va a usar un archivo de esta carpeta
//        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("images/icon.png"));
//        return retValue;
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        txt_email = new javax.swing.JTextField();
        txt_registradopor = new javax.swing.JTextField();
        combobox_estatus = new javax.swing.JComboBox<>();
        combobox_permisos = new javax.swing.JComboBox<>();
        button_actualizar_usuario = new javax.swing.JButton();
        button_restaurar_pass = new javax.swing.JButton();
        label_nombre = new javax.swing.JLabel();
        label_email = new javax.swing.JLabel();
        label_telefono = new javax.swing.JLabel();
        label_username = new javax.swing.JLabel();
        label_registradopor = new javax.swing.JLabel();
        label_titulo = new javax.swing.JLabel();
        label_estatus = new javax.swing.JLabel();
        label_permisos = new javax.swing.JLabel();
        txt_telefono = new javax.swing.JTextField();
        txt_username = new javax.swing.JTextField();
        txt_nombre = new javax.swing.JTextField();
        button_actualizar_usuario1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        label_wallpaper = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_email.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txt_email.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(txt_email, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 200, 25));

        txt_registradopor.setEditable(false);
        txt_registradopor.setBackground(new java.awt.Color(209, 219, 218));
        txt_registradopor.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txt_registradopor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_registradopor.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(txt_registradopor, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 210, 200, 25));

        combobox_estatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activo", "Inactivo" }));
        getContentPane().add(combobox_estatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 150, 100, -1));

        combobox_permisos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Administrador", "Funcionario" }));
        getContentPane().add(combobox_permisos, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, 120, -1));

        button_actualizar_usuario.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        button_actualizar_usuario.setForeground(new java.awt.Color(255, 255, 255));
        button_actualizar_usuario.setText("Actualizar usuario");
        button_actualizar_usuario.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));
        button_actualizar_usuario.setContentAreaFilled(false);
        button_actualizar_usuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_actualizar_usuarioActionPerformed(evt);
            }
        });
        getContentPane().add(button_actualizar_usuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 170, 35));

        button_restaurar_pass.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        button_restaurar_pass.setForeground(new java.awt.Color(255, 255, 255));
        button_restaurar_pass.setText("Restaurar contraseña");
        button_restaurar_pass.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));
        button_restaurar_pass.setContentAreaFilled(false);
        button_restaurar_pass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_restaurar_passActionPerformed(evt);
            }
        });
        getContentPane().add(button_restaurar_pass, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 350, 180, 35));

        label_nombre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        label_nombre.setForeground(new java.awt.Color(255, 255, 255));
        label_nombre.setText("Nombre:");
        getContentPane().add(label_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, -1));

        label_email.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        label_email.setForeground(new java.awt.Color(255, 255, 255));
        label_email.setText("Email:");
        getContentPane().add(label_email, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, -1, -1));

        label_telefono.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        label_telefono.setForeground(new java.awt.Color(255, 255, 255));
        label_telefono.setText("Teléfono:");
        getContentPane().add(label_telefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, -1, -1));

        label_username.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        label_username.setForeground(new java.awt.Color(255, 255, 255));
        label_username.setText("Username:");
        getContentPane().add(label_username, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, -1, -1));

        label_registradopor.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        label_registradopor.setForeground(new java.awt.Color(255, 255, 255));
        label_registradopor.setText("Registrado por:");
        getContentPane().add(label_registradopor, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 190, -1, -1));

        label_titulo.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        label_titulo.setForeground(new java.awt.Color(255, 255, 255));
        label_titulo.setText("Información del usuario");
        getContentPane().add(label_titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, -1, -1));

        label_estatus.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        label_estatus.setForeground(new java.awt.Color(255, 255, 255));
        label_estatus.setText("Estado");
        getContentPane().add(label_estatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, -1, -1));

        label_permisos.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        label_permisos.setForeground(new java.awt.Color(255, 255, 255));
        label_permisos.setText("Permisos de:");
        getContentPane().add(label_permisos, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, -1, -1));

        txt_telefono.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txt_telefono.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(txt_telefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 200, 25));

        txt_username.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txt_username.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(txt_username, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 90, 200, 25));

        txt_nombre.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txt_nombre.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 200, 25));

        button_actualizar_usuario1.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        button_actualizar_usuario1.setForeground(new java.awt.Color(255, 255, 255));
        button_actualizar_usuario1.setText("Eliminar usuario");
        button_actualizar_usuario1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));
        button_actualizar_usuario1.setContentAreaFilled(false);
        button_actualizar_usuario1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_actualizar_usuario1ActionPerformed(evt);
            }
        });
        getContentPane().add(button_actualizar_usuario1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 350, 170, 35));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/impresora.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 260, 110, 70));
        getContentPane().add(label_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 640, 450));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_actualizar_usuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_actualizar_usuarioActionPerformed

        int permisos_combo, estatus_combo, validacion = 0;

        String nombre, email, telefono, username, estatus = "", permisos_string = "";

        nombre = txt_nombre.getText().trim();
        email = txt_email.getText().trim();
        telefono = txt_telefono.getText().trim();
        username = txt_username.getText().trim();

        permisos_combo = combobox_permisos.getSelectedIndex() + 1;
        estatus_combo = combobox_estatus.getSelectedIndex() + 1;

        if (nombre.equals("")) {
            txt_nombre.setBackground(Color.red);
            //variable bandera para verificar si la condicion se cumple, si no vale 0 está vacio
            validacion++;
        }

        if (email.equals("")) {
            txt_email.setBackground(Color.red);
            validacion++;
        }

        if (telefono.equals("")) {
            txt_telefono.setBackground(Color.red);
            validacion++;
        }

        if (username.equals("")) {
            txt_username.setBackground(Color.red);
            validacion++;
        }

        if (permisos_combo == 1) {
            permisos_string = "Administrador";

        } else if (permisos_combo == 2) {
            permisos_string = "Funcionario";

        }

        if (estatus_combo == 1) {
            estatus = "Activo";
        } else if (estatus_combo == 2) {
            estatus = "Inactivo";
        }

        conexionn con = new conexionn();
        try {

            Connection cn = con.getconnection();

            //instruccion para que el username no sea igual a los que ya se esten registrados pero que no tome en cuenta su propio username ya que esto permitirá si quiere actualizar solo el telefono y quiere dejar el mismo username 
            PreparedStatement pst = cn.prepareStatement("select username from usuarios where username = '" + username + "' and not id_usuario = '" + ID + "'");

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                //si el usuario es igual cambiamos el color del txt a rojo en señal a error
                txt_nombre.setBackground(Color.red);
                JOptionPane.showMessageDialog(null, "Nombre de usuario no disponible");

                //cierre de la conexion a la db
                cn.close();
            } else {

                cn.close();

                //condicional si la variable bandera es 0 entonces todos los campos estan llenos
                if (validacion == 0) {

                    try {

                        //volvemos a hacer una nueva conexion a la db con un objeto distinto, pero este caso para el ingreso de los datos ya que el anterior era para verificar el username no fuese igual
                        Connection cn2 = con.getconnection();
                        //instruccion hacia la db para insertar todos los datos hacia la tabla usuarios
                        //9 (?) ya que son todos los campos o columnas que contieene la tabla usuarios
                        PreparedStatement pst2 = cn2.prepareStatement("update usuarios set  nombre = ?, email = ?, telefono = ?, username = ?, estado = ?, permisos = ?  where id_usuario = '" + ID + "'");

                        //ingresamos a la db cada campo de los datos introducidos por el usuario mediante el metodo setString con el objeto pst2
                        //columna (1) y el dato (0) -> para el id
                        //columna (2) y el dato (nombre) -> para el nombre y asi sucesivamente
                        pst2.setString(1, nombre);
                        pst2.setString(2, email);
                        pst2.setString(3, telefono);
                        pst2.setString(4, username);
                        pst2.setString(5, estatus);
                        pst2.setString(6, permisos_string);

                        //realizamos el ingreso de datos mediante el metodo executeUpdate con el objeto pst2
                        pst2.executeUpdate();
                        //cerramos la conexion a la db
                        cn2.close();

                        //metodo para limpiar los campos
                        Limpiar();

                        //metodo para cambiar el color luego de realizado el ingreso con exito
                        txt_nombre.setBackground(Color.green);
                        txt_email.setBackground(Color.green);
                        txt_telefono.setBackground(Color.green);
                        txt_username.setBackground(Color.green);

                        JOptionPane.showMessageDialog(null, "Usuario actualizado con exito");
                        //metodo para eliminar objetos y liberar recursos
                        //y para que la interfaz se cierre al final del registro
                        this.dispose();

                    } catch (HeadlessException | SQLException e) {

                        //mensaje de error en consola para el programador
                        System.err.println("Error en validar nombre de usuario" + e);
                        //mensaje de error por optionpane para el usuario
                        JOptionPane.showMessageDialog(null, "Error en actualizar el usuario, contacte con el administrador");

                    }

                } else {
                    //mensaje por si el usuario no llena todos los campos
                    JOptionPane.showMessageDialog(null, "Debes llenar todos los campos");
                }
            }

        } catch (HeadlessException | SQLException e) {
            //mensaje de error por si hay un problema en la conexion con la db por consola para el programador
            System.err.println("Error en conexion a la db  " + e);
            //mensaje de error por si hay un problema en la conexion con la db por optionpane hacia el usuario
            JOptionPane.showMessageDialog(null, "Error en actualizar el usuario, contacte con el administrador");
        }


    }//GEN-LAST:event_button_actualizar_usuarioActionPerformed

    private void button_restaurar_passActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_restaurar_passActionPerformed
        ResetPasswordForm restaurar_contraseña = new ResetPasswordForm();
        restaurar_contraseña.setVisible(true);
    }//GEN-LAST:event_button_restaurar_passActionPerformed

    private void button_actualizar_usuario1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_actualizar_usuario1ActionPerformed
        int permisos_combo, estatus_combo, validacion = 0;

        String nombre, email, telefono, username, estatus = "", permisos_string = "";

        nombre = txt_nombre.getText().trim();
        email = txt_email.getText().trim();
        telefono = txt_telefono.getText().trim();
        username = txt_username.getText().trim();

        permisos_combo = combobox_permisos.getSelectedIndex() + 1;
        estatus_combo = combobox_estatus.getSelectedIndex() + 1;

        if (nombre.equals("")) {
            txt_nombre.setBackground(Color.red);
            //variable bandera para verificar si la condicion se cumple, si no vale 0 está vacio
            validacion++;
        }

        if (email.equals("")) {
            txt_email.setBackground(Color.red);
            validacion++;
        }

        if (telefono.equals("")) {
            txt_telefono.setBackground(Color.red);
            validacion++;
        }

        if (username.equals("")) {
            txt_username.setBackground(Color.red);
            validacion++;
        }

        if (permisos_combo == 1) {
            permisos_string = "Administrador";

        } else if (permisos_combo == 2) {
            permisos_string = "Funcionario";

        }

        if (estatus_combo == 1) {
            estatus = "Activo";
        } else if (estatus_combo == 2) {
            estatus = "Inactivo";
        }

        conexionn con = new conexionn();
        try {

            //condicional si la variable bandera es 0 entonces todos los campos estan llenos
            if (validacion == 0) {

                try {

                    //volvemos a hacer una nueva conexion a la db con un objeto distinto, pero este caso para el ingreso de los datos ya que el anterior era para verificar el username no fuese igual
                    Connection cn = con.getconnection();
                    //instruccion hacia la db para insertar todos los datos hacia la tabla usuarios
                    //9 (?) ya que son todos los campos o columnas que contieene la tabla usuarios
                    PreparedStatement pst2 = cn.prepareStatement("delete from usuarios where id_usuario = ?");

                    //ingresamos a la db cada campo de los datos introducidos por el usuario mediante el metodo setString con el objeto pst2
                    //columna (1) y el dato (0) -> para el id
                    //columna (2) y el dato (nombre) -> para el nombre y asi sucesivamente
                    pst2.setInt(1, ID);

                    //realizamos el ingreso de datos mediante el metodo executeUpdate con el objeto pst2
                    pst2.executeUpdate();
                    //cerramos la conexion a la db
                    cn.close();

                    //metodo para limpiar los campos
                    Limpiar();

                    //metodo para cambiar el color luego de realizado el ingreso con exito
                    txt_nombre.setBackground(Color.green);
                    txt_email.setBackground(Color.green);
                    txt_telefono.setBackground(Color.green);
                    txt_username.setBackground(Color.green);

                    JOptionPane.showMessageDialog(null, "Usuario eliminado con exito");
                    //metodo para eliminar objetos y liberar recursos
                    //y para que la interfaz se cierre al final del registro
                    this.dispose();

                } catch (HeadlessException | SQLException e) {

                    //mensaje de error en consola para el programador
                    System.err.println("Error en validar nombre de usuario" + e);
                    //mensaje de error por optionpane para el usuario
                    JOptionPane.showMessageDialog(null, "Error en eliminar el usuario, contacte con el administrador");

                }

            } else {
                //mensaje por si el usuario no llena todos los campos
                JOptionPane.showMessageDialog(null, "Debes llenar todos los campos");

            }

        } catch (HeadlessException e) {
            //mensaje de error por si hay un problema en la conexion con la db por consola para el programador
            System.err.println("Error en conexion a la db  " + e);
            //mensaje de error por si hay un problema en la conexion con la db por optionpane hacia el usuario
            JOptionPane.showMessageDialog(null, "Error en actualizar el usuario, contacte con el administrador");
        }

    }//GEN-LAST:event_button_actualizar_usuario1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

//        String idCliente = JOptionPane.showInputDialog("Digite el id del cliente a mostrar");
        manage_user.reporteIDUsuario(ID);


    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageUsersForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageUsersForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageUsersForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageUsersForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ManageUsersForm().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(ManageUsersForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_actualizar_usuario;
    private javax.swing.JButton button_actualizar_usuario1;
    private javax.swing.JButton button_restaurar_pass;
    private javax.swing.JComboBox<String> combobox_estatus;
    private javax.swing.JComboBox<String> combobox_permisos;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel label_email;
    private javax.swing.JLabel label_estatus;
    private javax.swing.JLabel label_nombre;
    private javax.swing.JLabel label_permisos;
    private javax.swing.JLabel label_registradopor;
    private javax.swing.JLabel label_telefono;
    private javax.swing.JLabel label_titulo;
    private javax.swing.JLabel label_username;
    private javax.swing.JLabel label_wallpaper;
    private javax.swing.JTextField txt_email;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_registradopor;
    private javax.swing.JTextField txt_telefono;
    private javax.swing.JTextField txt_username;
    // End of variables declaration//GEN-END:variables

    public void Limpiar() {
        txt_email.setText("");
//        txt_email.setText("");
//        txt_telefono.setText("");
//        txt_username.setText("");

        combobox_permisos.setSelectedIndex(0);
        combobox_estatus.setSelectedIndex(0);
    }

}
